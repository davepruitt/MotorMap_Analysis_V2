classdef MotorMapMovements
    
    enumeration
        Vibrissa,
        Jaw,
        Neck,
        Trunk,
        Grasp,
        DigitExtension,
        Supination,
        Pronation,
        WristExtension,
        ElbowFlexion,
        Retract,
        Abduction,
        Adduction,
        Elevate,
        Hindpaw,
        Tail,
        Shoulder,
        Distal,
        Proximal,
        Advance,
        Face,
        NoResponse,
        Bone,
        Other,
        Undefined
    end
    
    properties (Constant)
        
        LonghandMovements = { ...
            'Vibrissa', ...
            'Jaw', ...
            'Neck', ...
            'Trunk', ...
            'Grasp', ...
            'Digit', ...
            'Supination', ...
            'Pronation', ...
            'Wrist Extension', ...
            'Elbow Flexion', ...
            'Retraction', ...
            'Abduction', ...
            'Adduction', ...
            'Elevate', ...
            'Hindpaw', ...
            'Tail', ...
            'Shoulder', ...
            'Distal', ...
            'Proximal', ...
            'Advance', ...
            'Face', ...
            'No Response', ...
        };
        
        ShorthandMovements = { ...
            {'vib', 'v', 'vibrissa'}, ...
            {'jaw', 'j'}, ...
            {'neck', 'n'}, ...
            {'trunk'}, ...
            {'grasp', 'g'}, ...
            {'digit'}, ...
            {'sup', 'supination'}, ...
            {'pro', 'pron', 'pronation'}, ...
            {'we', 'wrist', 'wrist ext', 'wrist extension'}, ...
            {'ef', 'elbow', 'elbow flex', 'elbow flexion', 'elbow extension'}, ...
            {'ret', 'retract', 'retraction'}, ...
            {'abd', 'abduction'}, ...
            {'add', 'adduction'}, ...
            {'el', 'elevate', 'elevation'}, ...
            {'hp', 'hind', 'hindpaw', 'hindleg', 'h'}, ...
            {'tail'}, ...
            {'shoulder', 's'}, ...
            {'distal', 'dist', 'd'}, ...
            {'proximal', 'prox', 'p'}, ...
            {'advance', 'adv'}, ...
            {'face'}, ...
            {'nr'}, ...
        };
       
        FaceMovements = [ ...
            MotorMapMovements.Vibrissa ...
            MotorMapMovements.Jaw ...
            MotorMapMovements.Face ...
            ];
        
        HeadMovements = [ ...
            MotorMapMovements.Vibrissa ...
            MotorMapMovements.Jaw ...
            MotorMapMovements.Neck ...
            ]
        
        ForelimbMovements = [ ...
            MotorMapMovements.Grasp ...
            MotorMapMovements.DigitExtension ...
            MotorMapMovements.Supination ...
            MotorMapMovements.Pronation ...
            MotorMapMovements.WristExtension ...
            MotorMapMovements.ElbowFlexion ...
            MotorMapMovements.Retract ...
            MotorMapMovements.Abduction ...
            MotorMapMovements.Adduction ...
            MotorMapMovements.Elevate ...
            MotorMapMovements.Shoulder ...
            MotorMapMovements.Distal ...
            MotorMapMovements.Proximal ...
            MotorMapMovements.Advance ...
            ]
        
        DistalForelimbMovements = [ ...
            MotorMapMovements.Grasp ...
            MotorMapMovements.DigitExtension ...
            MotorMapMovements.Supination ...
            MotorMapMovements.Pronation ...
            MotorMapMovements.WristExtension ...
            MotorMapMovements.Distal ...
            ]
        
        ProximalForelimbMovements = [ ...
            MotorMapMovements.ElbowFlexion ...
            MotorMapMovements.Retract ...
            MotorMapMovements.Abduction ...
            MotorMapMovements.Adduction ...
            MotorMapMovements.Elevate ...
            MotorMapMovements.Shoulder ...
            MotorMapMovements.Advance ...
            MotorMapMovements.Proximal ...
            ]
        
        NonResponsiveTypes = [ ...
            MotorMapMovements.NoResponse ...
            MotorMapMovements.Bone ...
            ]
        
        MapPlotColors = [ ...
            0.4 0.65 0.3; ...       %Vibrissa    
            0.2 0.45 0.1; ...       %Face/Jaw
            0.23 0.47 0.83; ...     %Distal
            0.06 0.33 0.79; ...     %Proximal
            0.57 0.75 0.48; ...     %Neck
            0.86 0.4 0.4; ...       %Hindlimb
            0 0 0;                  %No Response
            ];
        
        MapAPCoordinates = [5.0 4.5 4.0 3.5 3.0 2.5 2.0 1.5 1.0 0.5 0.0 -0.5 -1.0 -1.5 -2.0 -2.5 -3.0 -3.5 -4.0];
        MapMLCoordinates = [6.0 5.5 5.0 4.5 4.0 3.5 3.0 2.5 2.0 1.5 1.0 0.5 0.0];
        
    end
    
    methods (Static)
        
        function result = IsForelimb ( movement_type )
            result = ~isempty(find(MotorMapMovements.ForelimbMovements == movement_type, 1, 'first'));
        end
        
        function result = IsDistalForelimb ( movement_type )
            result = ~isempty(find(MotorMapMovements.DistalForelimbMovements == movement_type, 1, 'first'));
        end
        
        function result = IsProximalForelimb ( movement_type )
            result = ~isempty(find(MotorMapMovements.ProximalForelimbMovements == movement_type, 1, 'first'));
        end
        
        function result = IsFaceMovement ( movement_type )
            result = ~isempty(find(MotorMapMovements.FaceMovements == movement_type, 1, 'first'));
        end
        
        function result = IsHeadMovement ( movement_type )
            result = ~isempty(find(MotorMapMovements.HeadMovements == movement_type, 1, 'first'));
        end
        
        function result = IsResponse ( movement_type )
            result = isempty(find(MotorMapMovements.NonResponsiveTypes == movement_type, 1, 'first'));
        end
        
        function result = GetEnumValueFromInteger ( integer_value )
            if (~isempty(integer_value) && isscalar(integer_value) && isnumeric(integer_value))
                enumerated_type = enumeration(MotorMapMovements.Vibrissa);
                result = enumerated_type(integer_value);
            else
                result = MotorMapMovements.Undefined;
            end
        end
        
        function result = GetIntegerValue ( movement_type )
            result = find(enumeration(MotorMapMovements.Vibrissa) == movement_type, 1, 'first');
        end
        
        function result = ConvertFromMovementToLonghand ( movement_type )
            
            result = 'Undefined';
            int_value = MotorMapMovements.GetIntegerValue(movement_type);
            if (~isempty(int_value))
                result = MotorMapMovements.LonghandMovements(int_value);
            end
            
        end
        
        function result = ConvertFromShorthandToMovement ( shorthand )
           
            result = MotorMapMovements.Undefined;
            
            for i = 1:size(MotorMapMovements.ShorthandMovements, 2)
                shorthand_for_this_index = MotorMapMovements.ShorthandMovements{i};
                if (any(strcmpi(shorthand_for_this_index, shorthand)))
                    result = MotorMapMovements.GetEnumValueFromInteger(i);
                end
            end
            
        end

        function color = GetPlotColor ( movement_type )
            if (movement_type == MotorMapMovements.Vibrissa)
                color = MotorMapMovements.MapPlotColors(1, :);
            elseif (MotorMapMovements.IsFaceMovement(movement_type))
                color = MotorMapMovements.MapPlotColors(2, :);
            elseif (MotorMapMovements.IsDistalForelimb(movement_type))
                color = MotorMapMovements.MapPlotColors(3, :);
            elseif (MotorMapMovements.IsProximalForelimb(movement_type))
                color = MotorMapMovements.MapPlotColors(4, :);
            elseif (MotorMapMovements.Neck == movement_type)
                color = MotorMapMovements.MapPlotColors(5, :);
            elseif (MotorMapMovements.Hindpaw == movement_type)
                color = MotorMapMovements.MapPlotColors(6, :);
            elseif (~MotorMapMovements.IsResponse(movement_type))
                color = MotorMapMovements.MapPlotColors(7, :);
            else
                color = [1 1 1];
            end
        end
        
    end
    
end

